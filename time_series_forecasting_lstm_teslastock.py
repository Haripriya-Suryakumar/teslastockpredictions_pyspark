# -*- coding: utf-8 -*-
"""Time_Series_Forecasting_LSTM_TeslaStock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r-Tc3C_VdEF-CtJB8JKELIzpEgfM7HrN
"""

!pip install pyspark tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import mean_squared_error, r2_score

spark = SparkSession.builder.appName("TeslaStockPrediction").getOrCreate()

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("/content/TSLA.csv", parse_dates=True, index_col='Date')
print(df.head())

plt.figure(figsize=(8, 8))
plt.plot(df.index, df['Close'], color='blue', label='Tesla Stock Price')
plt.title('Tesla Stock Price Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

df = df[['Close']]

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df.values.reshape(-1, 1))

def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i-time_step:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

X_train, y_train = create_dataset(train_data)
X_test, y_test = create_dataset(test_data)

# Reshape data for LSTM
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), callbacks=[early_stopping])

predicted_stock_price = model.predict(X_test)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)
real_stock_price = scaler.inverse_transform(y_test.reshape(-1, 1))

plt.figure(figsize=(8, 6))
plt.plot(real_stock_price, color='blue', label='Real Tesla Stock Price')
plt.plot(predicted_stock_price, color='red', label='Predicted Tesla Stock Price')
plt.title('Tesla Stock Price Prediction using LSTM')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

r2 = r2_score(real_stock_price, predicted_stock_price)
accuracy = 100 - np.mean(np.abs((real_stock_price - predicted_stock_price) / real_stock_price)) * 100
print(f"R-squared (RÂ²): {r2}")
print(f"Accuracy: {accuracy}%")

#predicting next 30 days stock prices
future_steps = 30
last_data = scaled_data[-60:]
last_data = last_data.reshape(1, 60, 1)

future_predictions = model.predict(last_data)
future_predictions = scaler.inverse_transform(future_predictions)

print(f"Predicted Tesla stock price for the next {future_steps} days: {future_predictions}")